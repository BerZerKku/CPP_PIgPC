#include "flashParams.h"

// параметр заглушка
static const Param fNullParam PROGMEM = {
    "",                     // название параметра
    GB_COM_NO,              // команда стандартного протокола
    Param::PARAM_NO,        // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    1,                      // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_NO,             // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// синхронизация часов
static const Param fTimeSynch PROGMEM = {
    "Синхронизация часов",  // название параметра
    GB_COM_GET_TIME_SINCHR, // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcTymeSynch[0],         // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcTymeSynch),   // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// номер аппарата
static const Param fNumOfDevice PROGMEM = {
    "Номер аппарата",       // название параметра
    GB_COM_GET_DEVICE_NUM,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    3,                      // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_ON_NUM_DEVS,  // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

static const Param fNumOfDeviceRing PROGMEM = {
    "Номер аппарата",       // название параметра
    GB_COM_GET_DEVICE_NUM,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    255,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// контроль выходного сигнала
static const Param fOutCheck PROGMEM = {
    "Контроль вых.сигнала", // название параметра
    GB_COM_GET_OUT_CHECK,   // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// порог предупреждения
static const Param fWarnThd PROGMEM = {
    "Порог предупреждения", // название параметра
    GB_COM_GET_CF_THRESHOLD,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    22,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// порог предупреждения по КC (для РЗСК)
static const Param fWarnThdCf PROGMEM = {
    "Порог предупр. по КC", // название параметра
    GB_COM_GET_CF_THRESHOLD,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    22,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// время перезапуска
static const Param fTimeRerun PROGMEM = {
    "Время перезапуска",    // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_SEC,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    5,                      // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// удержание реле команд ПРД
static const Param fComPrdKeep PROGMEM = {
    "Удерж. реле ком. ПРД", // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_prdKeep,   // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// удержание реле команд ПРМ
static const Param fComPrmKeep PROGMEM = {
    "Удерж. реле ком. ПРМ", // название параметра
    GB_COM_GET_COM_PRM_KEEP,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// загрубление чувствительности ПРМ
// в К400 3-х концевой второй параметр работает только для 3-его аппарата
static const Param fInDec PROGMEM = {
    "Загрубл. чувств. ПРМ", // название параметра
    GB_COM_GET_CF_THRESHOLD,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    2,                      // кол-во повторений параметра
    0,                      // минимальное значение
    22,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    2,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_NUM_DEVS, // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// адрес в локальной сети
static const Param fNetAddress PROGMEM = {
    "Сетевой адрес",        // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    247,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_netAdr, // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// номинальноые выходное напряжение
static const Param fUOutNom PROGMEM = {
    "Uвых номинальное",     // название параметра
    GB_COM_GET_COM_PRM_KEEP,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_V,           // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    18,                     // минимальное значение
    50,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// частота
static const Param fFreq PROGMEM = {
    "Частота",              // название параметра
    GB_COM_GET_FREQ,        // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT_NO_DIM,// диапазон измнения
    Param::DIM_KHZ,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    1000,                   // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT16_BE,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// совместимость (Р400, Р400м)
static const Param fCompP400 PROGMEM = {
    "Совместимость",        // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcCompatibility[0],     // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcCompatibility),// максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// снижение ответа АК (ПВЗЛ)
static const Param fInDecAcAnswer PROGMEM = {
    "Снижение ответа АК",   // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    20,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// тип детектора
static const Param fDetector PROGMEM = {
    "Тип детектора",        // название параметра
    GB_COM_GET_TIME_SINCHR, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    3,                      // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    2,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// коррекция напряжения
static const Param fCorU PROGMEM = {
    "Коррекция напряжения", // название параметра
    GB_COM_GET_COR_U_I,     // команда стандартного протокола
    Param::PARAM_U_COR,     // тип параметра
    Param::RANGE_U_COR,     // диапазон измнения
    Param::DIM_V,           // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    -600,                   // минимальное значение
    600,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_COR_U,          // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// коррекция тока
static const Param fCorI PROGMEM = {
    "Коррекция тока",       // название параметра
    GB_COM_GET_COR_U_I,     // команда стандартного протокола
    Param::PARAM_I_COR,     // тип параметра
    Param::RANGE_I_COR,     // диапазон измнения
    Param::DIM_MA,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    -999,                   // минимальное значение
    999,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_COR_I,          // тип параметра для сохранения новго значения
    2,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// протокол обмена (ПВЗУ-Е)
static const Param fPvzueProtocol PROGMEM = {
    "Протокол обмена",      // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcPvzueProtocol[0],     // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    SIZE_OF(fcPvzueProtocol),// максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// признак четности (ПВЗУ-Е)
static const Param fPvzueParity PROGMEM = {
    "Признак четности",     // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcPvzueParity[0],       // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    SIZE_OF(fcPvzueParity), // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    2,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// допустимые провалы (ПВЗУ-Е)
static const Param fPvzueFail PROGMEM = {
    "Допустимые провалы",   // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    80,                     // максимальное значение
    2,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    3,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// порог по помехе (ПВЗУ-Е)
static const Param fPvzueNoiseThd PROGMEM = {
    "Порог по помехе",      // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_SEC,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    4,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// допустимая помеха (ПВЗУ-Е)
static const Param fPvzueNoiseLvl PROGMEM = {
    "Допустимая помеха",    // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    20,                     // минимальное значение
    80,                     // максимальное значение
    20,                     // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    5,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// тип автоконтроля (ПВЗУ-Е)
static const Param fPvzueAcType PROGMEM = {
    "Тип автоконтроля",     // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcPvzueTypeAC[0],       // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    SIZE_OF(fcPvzueTypeAC), // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    6,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// период беглого режима АК (ПВЗУ-Е)
static const Param fPvzueAcPeriod PROGMEM = {
    "Период беглого АК",    // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_SEC,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    255,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    7,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};


//  период повтора беглого режима АК (ПЗВУ-Е)
static const Param fPvzueAcPerRe PROGMEM = {
    "Период повт.бегл. АК", // название параметра
    GB_COM_GET_TIME_RERUN,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_SEC,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    255,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    8,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// резервирование
static const Param fBackup PROGMEM = {
    "Резервирование",       // название параметра
    GB_COM_GET_COR_U_I,     // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// совместимость К400
static const Param fCompK400 PROGMEM = {
    "Совместимость",        // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcCompK400[0],          // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcCompK400),    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_compK400,  // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// тип линии (кол-во аппаратов в линии)
static const Param fNumOfDevices PROGMEM = {
    "Тип линии",            // название параметра
    GB_COM_DEF_GET_LINE_TYPE,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNumDevices[0],        // массив значений
    1,                      // кол-во повторений параметра
    1,                      // минимальное значение
    SIZE_OF(fcNumDevices),  // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};


// телемеханика
static const Param fTmK400 PROGMEM = {
    "Телемеханика",         // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_tmK400,// байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// уровень срабатывания предупредительной сигнализации по D
static const Param fWarnD PROGMEM = {
    "Порог предупр. по D",  // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    -64,                    // минимальное значение
    64,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_warnD, // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// уровень срабатывания аварийной сигнализации по D
static const Param fAlarmD PROGMEM = {
    "Порог аварии по D",    // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    -64,                    // минимальное значение
    64,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_alarmD,// байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// контроль температуры
static const Param fTempMonitor PROGMEM = {
    "Контроль температуры", // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_tempMonitor,   // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// верхнее значение температуры
static const Param fTempThrHi PROGMEM = {
    "Верх.значение темпер", // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    100,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_tempThrHi, // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// верхнее значение температуры
static const Param fTempThrLow PROGMEM = {
    "Нижн.значение темпер", // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    100,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_tempThrLow,    // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// скорость ТМ
static const Param fTmSpeed PROGMEM = {
    "Скорость ТМ",          // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcTMSpeed[0],           // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_tmSpeed,   // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

static const Param fAlarmResetMode PROGMEM = {
    //2345678901234567890
    "Сброс сигнализации",   // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcAlarmResetMode[0],    // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcAlarmResetMode),  // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_alarmResetMode, // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// тип защиты
static const Param fDefType PROGMEM = {
    "Тип защиты",           // название параметра
    GB_COM_DEF_GET_DEF_TYPE,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcDefType[0],           // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcDefType),     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// дополнительное время без манипуляции
static const Param fTimeNoMan PROGMEM = {
    "Доп. время без ман.",  // название параметра
    GB_COM_DEF_GET_T_NO_MAN,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_HOUR,        // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    99,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// перекрытие импульсов
static const Param fOverlap PROGMEM = {
    "Перекрытие импульсов", // название параметра
    GB_COM_DEF_GET_OVERLAP, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    54,                     // максимальное значение
    2,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// перекрытие импульсов Р400
static const Param fOverlapP400 PROGMEM = {
    "Перекрытие импульсов", // название параметра
    GB_COM_DEF_GET_OVERLAP, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    18,                     // минимальное значение
    54,                     // максимальное значение
    2,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// перекрытие импульсов Р400 Оптика
static const Param fOverlapOpto PROGMEM = {
    "Перекрытие импульсов", // название параметра
    GB_COM_DEF_GET_OVERLAP, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    54,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// компенсация задержки в линии
static const Param fDelay PROGMEM = {
    "Компенсация задержки", // название параметра
    GB_COM_DEF_GET_DELAY,   // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    2,                      // кол-во повторений параметра
    0,                      // минимальное значение
    18,                     // максимальное значение
    2,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_NUM_DEVS, // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// компенсация задержки в линии Р400 Оптика
static const Param fDelayOpto PROGMEM = {
    "Компенсация задержки", // название параметра
    GB_COM_DEF_GET_DELAY,   // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    2,                      // кол-во повторений параметра
    0,                      // минимальное значение
    18,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_NUM_DEVS, // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// порог предупреждения по РЗ
static const Param fWarnThdRz PROGMEM = {
    "Порог предупр. по РЗ", // название параметра
    GB_COM_DEF_GET_RZ_THRESH,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    16,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// загрубление чувствительности
static const Param fSensDec PROGMEM = {
    "Загрубление чувствит", // название параметра
    GB_COM_DEF_GET_RZ_DEC,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    32,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// загрубление чувствительности РЗ
static const Param fSensDecRz PROGMEM = {
    "Загрубл. чувств. РЗ",  // название параметра
    GB_COM_DEF_GET_RZ_DEC,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    2,                      // кол-во повторений параметра
    0,                      // минимальное значение
    32,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_NUM_DEVS, // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметрай
};

// тип приемника
static const Param fPrmType PROGMEM = {
    "Тип приемника",        // название параметра
    GB_COM_DEF_GET_PRM_TYPE,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcPrmType[0],           // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcPrmType),     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// снижение уровня АК
static const Param fAcInDec PROGMEM = {
    "Снижение уровня АК",   // название параметра
    GB_COM_DEF_GET_PRM_TYPE,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// частота ПРД
static const Param fFreqPrd PROGMEM = {
    "Частота ПРД",          // название параметра
    GB_COM_DEF_GET_FREQ_PRD,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcPvzlFreq[0],          // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcPvzlFreq),    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// частота ПРМ
static const Param fFreqPrm PROGMEM = {
    "Частота ПРМ",          // название параметра
    GB_COM_DEF_GET_RZ_THRESH,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcPvzlFreq[0],          // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcPvzlFreq),    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// сдвиг переднего фронта ПРД
static const Param fShiftFront PROGMEM = {
    "Сдвиг пер.фронта ПРД", // название параметра
    GB_COM_DEF_GET_OVERLAP, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,//72,                       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// сдвиг заднего фронта ПРД относительно сигнала МАН (пуск)
static const Param fShiftBack PROGMEM = {
    "Сдвиг зад.фронта ПРД", // название параметра
    GB_COM_DEF_GET_OVERLAP, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,//72,                       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    2,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// сдвиг ПРМ
static const Param fShiftPrm PROGMEM = {
    "Сдвиг ПРМ",            // название параметра
    GB_COM_DEF_GET_OVERLAP, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,//72,                       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    3,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// сдвиг ВЧ ПРД от ПУСК
static const Param fShiftPrd PROGMEM = {
    "Сдвиг ВЧ ПРД от ПУСК", // название параметра
    GB_COM_DEF_GET_OVERLAP, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,//72,                       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    4,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// ограничение полосы передатчика
static const Param fLimitPrd PROGMEM = {
    "Огранич. полосы ПРД",  // название параметра
    GB_COM_DEF_GET_LIMIT_PRD,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// задержка выключения ПРМ
static const Param fDelayOffPrm PROGMEM = {
    "Задержка выкл. ПРМ",   // название параметра
    GB_COM_DEF_GET_LIMIT_PRD,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,//72,               // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    2,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// задержка включения ПРМ
static const Param fDelayOnPrm PROGMEM = {
    "Задержка вкл. ПРМ",    // название параметра
    GB_COM_DEF_GET_LIMIT_PRD,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,//72,                       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    3,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// задержка включения ПРД
static const Param fDelayOffPrd PROGMEM = {
    "Задержка вкл. ПРД",    // название параметра
    GB_COM_DEF_GET_LIMIT_PRD,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,//72,                       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    4,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// минимальная длительность ПРД
static const Param fMinTimePrd PROGMEM = {
    "Мин. длит. ПРД",       // название параметра
    GB_COM_DEF_GET_LIMIT_PRD,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DEG,         // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,//72,                       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    5,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// время включения (задержка срабатывания дискретного входа)
static const Param fPrdInDelay PROGMEM = {
    "Задержка срабат. ПРД", // название параметра
    GB_COM_PRD_GET_TIME_ON, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_MSEC,        // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    20,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// длительность команды ВЧ
static const Param fPrdDurationL PROGMEM = {
    "Длительность команды", // название параметра
    GB_COM_PRD_GET_DURATION,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_MSEC,        // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    30,                     // минимальное значение
    100,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения                      // байт дополнительной информации для сохранения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра                  // байт дополнительной информации для сохранения
};

// длительность команды ОПТИКА
static const Param fPrdDurationO PROGMEM = {
    "Длительность команды", // название параметра
    GB_COM_PRD_GET_DURATION,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_MSEC,        // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    30,                     // минимальное значение
    500,                    // максимальное значение
    10,                     // дискретность
    10,                     // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// тестовая команда
static const Param fPrdTestCom PROGMEM = {
    "Тестовая команда",     // название параметра
    GB_COM_PRD_GET_TEST_COM,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// следящие команды
static const Param fPrdComLong PROGMEM = {
    "Следящие команды",     // название параметра
    GB_COM_PRD_GET_LONG_COM,// команда стандартного протокола
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    32,                     // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_BITES,      // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRD,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// блокированные команды
static const Param fPrdComBlock PROGMEM = {
    "Блок. команды ПРД",    // название параметра
    GB_COM_PRD_GET_BLOCK_COM,// команда стандартного протокола
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    32,                     // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_BITES,      // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRD,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// трансляция ЦП
static const Param fPrdDrEnable PROGMEM = {
    "Трансляция ЦП",        // название параметра
    GB_COM_PRD_GET_DR_STATE,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// блокированные команды ЦП
static const Param fPrdDrComBlock PROGMEM = {
    "Блокиров. команды ЦП", // название параметра
    GB_COM_PRD_GET_DR_BLOCK,// команда стандартного протокола
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    32,                     // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_BITES,      // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRD,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// количество команд
static const Param fPrdComNums PROGMEM = {
    "Количество команд",    // название параметра
    GB_COM_PRD_GET_COM,     // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    4,                      // минимальное значение
    32,                     // максимальное значение
    4,                      // дискретность
    4,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// количество команд группы А
static const Param fPrdComNumsA PROGMEM = {
    "Количество команд А",  // название параметра
    GB_COM_PRD_GET_COM_A,   // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    32,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_ON_COM_PRD,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// коррекция частоты ПРД
static const Param fPrdFreqCorr PROGMEM = {
    "Коррекция частоты",    // название параметра
    GB_COM_PRD_GET_FREQ_CORR,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_HZ,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    -100,                   // минимальное значение
    100,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// снижение уровня КС
static const Param fPrdDecCf PROGMEM = {
    "Снижение уровня КС",   // название параметра
    GB_COM_PRD_GET_CF_TM,   // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    20,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// снижение уровня ТМ
static const Param fPrdDecTm PROGMEM = {
    "Снижение уровня ТМ",   // название параметра
    GB_COM_PRD_GET_CF_TM,   // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_DB,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    20,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    2,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// КС по умолчанию
static const Param fPrdDefaultCf PROGMEM = {
    "КС по умолчанию",      // название параметра
    GB_COM_PRD_GET_CF_TM,   // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcCF[0],                // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcCF),          // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    3,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// Сигнализация команд ПРМ
static const Param fPrdComSignal PROGMEM = {
    "Сигнализация команд",  // название параметра
    GB_COM_PRD_GET_COM_SIGN,// команда стандартного протокола
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    32,                     // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_BITES,      // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRD,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// задержка на фиксацию команды (время включения)
static const Param fPrmTimeOn PROGMEM = {
    "Задержка на фикс.ком", // название параметра
    GB_COM_PRM_GET_TIME_ON, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_MSEC,        // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    5,                      // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// задержка на фиксацию команды (время включения) в К400
static const Param fPrmTimeOnK400 PROGMEM = {
    "Задержка на фикс.ком", // название параметра
    GB_COM_PRM_GET_TIME_ON, // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_MSEC,        // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    10,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// блокированные команды
static const Param fPrmComBlock PROGMEM = {
    "Блок. команды ПРМ",    // название параметра
    GB_COM_PRM_GET_BLOCK_COM,// команда стандартного протокола
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    32,                     // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_BITES,      // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_ON_COM_PRM,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// задержка на выключение
static const Param fPrmTimeOff PROGMEM = {
    "Задержка на выкл.ком", // название параметра
    GB_COM_PRM_GET_TIME_OFF,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_MSEC,        // размерность
    fcNullBuf,              // массив значений
    32,                     // кол-во повторений параметра
    0,                      // минимальное значение
    1000,                   // максимальное значение
    50,                     // дискретность
    10,                     // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRM,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// трансляция ЦП
static const Param fPrmDrEnable PROGMEM = {
    "Трансляция ЦП",        // название параметра
    GB_COM_PRM_GET_DR_STATE,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// блокированные команды ЦП
static const Param fPrmDrComBlock PROGMEM = {
    "Блокиров. команды ЦП", // название параметра
    GB_COM_PRM_GET_DR_BLOCK,// команда стандартного протокола
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    32,                     // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_BITES,      // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRM,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// команда ВЧ в ЦП
static const Param fPrmDrComToHf PROGMEM = {
    "Команда ПРМ в ЦП",     // название параметра
    GB_COM_PRM_GET_DR_COM,  // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    32,                     // кол-во повторений параметра
    1,                      // минимальное значение
    32,                     // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRM,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// количество команд
static const Param fPrmComNums PROGMEM = {
    "Количество команд",    // название параметра
    GB_COM_PRM_GET_COM,     // команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    4,                      // минимальное значение
    32,                     // максимальное значение
    4,                      // дискретность
    4,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// Прием тестовой команды
static const Param fPrmTestCom PROGMEM = {
    "Прием тестовой ком.",  // название параметра
    GB_COM_PRM_GET_TEST_COM,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE // условие для изменения параметра
};

// коррекция частоты ПРМ
static const Param fPrmFreqCorr PROGMEM = {
    "Коррекция частоты",    // название параметра
    GB_COM_PRM_GET_FREQ_CORR,// команда стандартного протокола
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_HZ,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    -100,                   // минимальное значение
    100,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// Сигнализация команд ПРМ
static const Param fPrmComSignal PROGMEM = {
    "Сигнализация команд",  // название параметра
    GB_COM_PRM_GET_COM_SIGN,// команда стандартного протокола
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    32,                     // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_BITES,      // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,             // зависимость максимума
    Param::DEPEND_SAME_ON_COM_PRM,  // зависимость повторений
    Param::CHANGE_REG_DISABLE       // условие для изменения параметра
};

// Повышение безопасности
static const Param fPrmIncSafety PROGMEM = {
    "Повышение безопас-ти", // название параметра
    GB_COM_PRM_GET_INC_SAFETY,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,  // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8,           // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// четность - интерфейс связи
static const Param fIntfProtocol PROGMEM = {
    "Протокол",             // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcProtocol[0],          // массив значений
    1,                      // кол-во повторений параметра
    TProtocol::MIN,         // минимальное значение
    SIZE_OF(fcProtocol),    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_protocol,   // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// скорость связи - интерфейс связи
static const Param fIntfBaudrate PROGMEM = {
    "Скорость передачи",    // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcBaudRate[0],          // массив значений
    1,                      // кол-во повторений параметра
    TBaudRate::MIN,         // минимальное значение
    SIZE_OF(fcBaudRate),    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_baudrate,   // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// количество битов данных - интерфейс связи
static const Param fIntfDataBits PROGMEM = {
    "Биты данных",          // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcDataBits[0],          // массив значений
    1,                      // кол-во повторений параметра
    TDataBits::MIN,         // минимальное значение
    SIZE_OF(fcDataBits),    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_dataBits,   // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// четность - интерфейс связи
static const Param fIntfParity PROGMEM = {
    "Четность",             // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcParity[0],            // массив значений
    1,                      // кол-во повторений параметра
    TParity::MIN,           // минимальное значение
    SIZE_OF(fcParity),      // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_parity, // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// число стоповых битов - интерфейс связи
static const Param fIntfStopBits PROGMEM = {
    "Стоповые биты",        // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcStopBits[0],          // массив значений
    1,                      // кол-во повторений параметра
    TStopBits::MIN,         // минимальное значение
    SIZE_OF(fcStopBits),    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_stopBits,   // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// число стоповых битов - интерфейс связи
static const Param fIntfInterface PROGMEM = {
    "Интерфейс",            // название параметра
    GB_COM_NO,              // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcInterface[0],         // массив значений
    1,                      // кол-во повторений параметра
    TInterface::MIN,        // минимальное значение
    SIZE_OF(fcInterface),   // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_NO,             // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// время ожидания команд
static const Param fRingTimeWait PROGMEM = {
    "Время ожидания ком.",  // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола TODO
    Param::PARAM_INT,       // тип параметра
    Param::RANGE_INT,       // диапазон измнения
    Param::DIM_MSEC,        // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    255,                    // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_INT8_DOP,       // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_ringTimeWait,  // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// транзитные команды
static const Param fRingComTransit PROGMEM = {
    "Транзитные команды",   // название параметра
    GB_COM_GET_COM_PRD_KEEP,// команда стандартного протокола TODO
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_ON_OFF,    // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    MAX_NUM_COM_RING,       // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_BITES_DOP,      // тип параметра для сохранения новго значения
    POS_COM_PRD_KEEP_ringComTransit,    // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

//#if SIZE_OF(fcRingRenumber) < 100
//  #error "Превышено кол-во команд переназначения приемника."
//#endif

// переназначение команд приемника
static const Param fRingComRec PROGMEM = {
    "Переназначение ПРМ",   // название параметра
    GB_COM_PRM_GET_RING_COM_REC,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcRingRenumber[0],      // массив значений
    MAX_NUM_COM_PRM,        // кол-во повторений параметра
    0,                      // минимальное значение
    MAX_NUM_COM_RING + 1,   // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRM,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};
//
//#if (MAX_NUM_COM_RING) >= sizeof(fcRingRenumber)
//  #error "Превышено кол-во команд переназначения передатчика."
//#endif

// переназначение команд передатчика
static const Param fRingComTr PROGMEM = {
    "Переназначение ПРД",   // название параметра
    GB_COM_PRD_GET_RING_COM_TR, // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcRingRenumber[0],      // массив значений
    MAX_NUM_COM_PRD,        // кол-во повторений параметра
    0,                      // минимальное значение
    MAX_NUM_COM_RING + 1,   // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    1,                      // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRM,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// Вывод ПРМ (SAC1)
static const Param fVpSac1 PROGMEM = {
    "Вывод ПРМ (SAC1)",     // название параметра
    GB_COM_PRM_GET_BLOCK_ALL,// команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcVpSac1[0],            // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcVpSac1),      // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    POS_COM_PRM_BLOCK_ALL_vpSac1, // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// Управление (SAC2)
static const Param fVpSac2 PROGMEM = {
    "Управление (SAC2)",    // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_LIST,      // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcVpSac2[0],            // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcVpSac2),      // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT8,       // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_vpSac2, // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

// Управление направлением одного выхода (SA.m)
static const Param fVpSam PROGMEM = {
    "Блок. направл (SA.m)", // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_BITES,     // тип параметра
    Param::RANGE_LIST,      // диапазон измнения
    Param::DIM_NO,          // размерность
    fcOnOff[0],             // массив значений
    8,                      // кол-во повторений параметра
    0,                      // минимальное значение
    SIZE_OF(fcOnOff),       // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_BITES,      // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_vpSam,  // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // зависимость максимума
    Param::DEPEND_SAME_NO,  // зависимость повторений
    Param::CHANGE_REG_NO    // условие для изменения параметра
};

static const Param fUserPassword PROGMEM = {
    "Пароль",               // название параметра
    GB_COM_GET_NET_ADR,     // команда стандартного протокола
    Param::PARAM_PWD,       // тип параметра
    Param::RANGE_PWD,       // диапазон измнения
    Param::DIM_NO,          // размерность
    fcNullBuf,              // массив значений
    1,                      // кол-во повторений параметра
    0,                      // минимальное значение
    9999,                   // максимальное значение
    1,                      // дискретность
    1,                      // множитель для стандартного протокола
    GB_SEND_DOP_INT16_LE,   // тип параметра для сохранения новго значения
    POS_COM_NET_ADR_password, // байт дополнительной информации для сохранения
    Param::DEPEND_MAX_NO,   // заивимость максимума
    Param::DEPEND_SAME_ON_COM_PRM,  // зависимость повторений
    Param::CHANGE_REG_DISABLE   // условие для изменения параметра
};

// Массив параметров (связан с eGB_PARAM)
const Param* fParams[] PROGMEM  = {
    &fNullParam,
    // Общие параметры
    &fTimeSynch,
    &fNumOfDevice,
    &fNumOfDeviceRing,
    &fOutCheck,
    &fWarnThd,
    &fWarnThdCf,
    &fTimeRerun,
    &fComPrdKeep,
    &fComPrmKeep,
    &fInDec,
    &fNetAddress,
    &fUOutNom,
    &fFreq,
    &fCompP400,
    &fInDecAcAnswer,
    &fDetector,
    &fCorU,
    &fCorI,
    &fPvzueProtocol,
    &fPvzueParity,
    &fPvzueFail,
    &fPvzueNoiseThd,
    &fPvzueNoiseLvl,
    &fPvzueAcType,
    &fPvzueAcPeriod,
    &fPvzueAcPerRe,
    &fBackup,
    &fCompK400,
    &fNumOfDevices,
    &fTmK400,
    &fWarnD,
    &fAlarmD,
    &fTempMonitor,
    &fTempThrHi,
    &fTempThrLow,
    &fTmSpeed,
    &fAlarmResetMode,
    // Параметры защиты
    &fDefType,
    &fTimeNoMan,
    &fOverlap,
    &fOverlapP400,
    &fOverlapOpto,
    &fDelay,
    &fDelayOpto,
    &fWarnThdRz,
    &fSensDec,
    &fSensDecRz,
    &fPrmType,
    &fAcInDec,
    &fFreqPrd,
    &fFreqPrm,
    &fShiftFront,
    &fShiftBack,
    &fShiftPrm,
    &fShiftPrd,
    &fLimitPrd,
    &fDelayOffPrm,
    &fDelayOnPrm,
    &fDelayOffPrd,
    &fMinTimePrd,
    // Параметры передатчика
    &fPrdInDelay,
    &fPrdDurationL,
    &fPrdDurationO,
    &fPrdTestCom,
    &fPrdComLong,
    &fPrdComBlock,
    &fPrdDrEnable,
    &fPrdDrComBlock,
    &fPrdComNums,
    &fPrdComNumsA,
    &fPrdFreqCorr,
    &fPrdDecCf,
    &fPrdDecTm,
    &fPrdDefaultCf,
    &fPrdComSignal,
    // Параметры приемника
    &fPrmTimeOn,
    &fPrmTimeOnK400,
    &fPrmComBlock,
    &fPrmTimeOff,
    &fPrmDrEnable,
    &fPrmDrComBlock,
    &fPrmDrComToHf,
    &fPrmComNums,
    &fPrmTestCom,
    &fPrmFreqCorr,
    &fPrmComSignal,
    &fPrmIncSafety,
    // Параметры интерфейса
    &fIntfProtocol,
    &fIntfBaudrate,
    &fIntfDataBits,
    &fIntfParity,
    &fIntfStopBits,
    &fIntfInterface,
    // Параметры кольца
    &fRingTimeWait,
    &fRingComTransit,
    &fRingComRec,
    &fRingComTr,
    // Виртуальная панель
    &fVpSac1,
    &fVpSac2,
    &fVpSam,
    // Другое
    &fUserPassword
};
