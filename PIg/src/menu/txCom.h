/*
 * TTxCom1.h
 *
 *  Created on: 11 июн. 2021 г.
 *      Author: Shcheblykin
 */

#ifndef TX_COM_H_
#define TX_COM_H_

#include "glbDefine.h"

// класс для передачи команд
class TTxCom
{

    /// NOTE Размер буфера для быстрых команд больше 3 лучше не делать!
    /// NOTE Размер буфера для команд 2 больше 4 лучше не делать!

    static const uint8_t kSizeBufComFast = 3;  ///< Размер буфера для быстрых команд.
    static const uint8_t kSizeBufCom1 = 10;  ///< Размер буфера для команд 1.
    static const uint8_t kSizeBufCom2 = 4;  ///< Размер буфера для команд 2. Не делать больше 4!
    static const uint8_t kSizeDataBuf = 16;  ///< Размер буфера данных.

    /// Структура быстрых команд.
    struct fastCom_t
    {
        eGB_COM       command;             ///< Команда.
        eGB_SEND_TYPE sendType;            ///< Тип команды.
        uint8_t       data[kSizeDataBuf];  ///< Данные.
    };

public:
    TTxCom();

    /// Очистка буферов команд 1 и 2.
    void clear();

    /// Очистка буфера быстрых команд.
    void clearFastCom();

    /** Запись команды в буфер 1.
     *
     *  Команды передающиеся один раз за цикл опроса.
     *
     *  Если num > 0, то заменяется последняя команда в буфере.
     *  Если num = 0 команда добавляется.
     *
     *  @param com Код команды.
     *  @param num Индекс элемента в буфере.
     *  @retval True - в случае успешной записи.
     *  @retval False - если не удалось поместить команду в буфер.
     */
    bool addCom1(eGB_COM com, uint8_t num = 0);

    /** Последовательная выдача имеющихся в буфере 1 команд (по кругу).
     *
     *  Если дошли до конца буфера, то будет считано значение из начала.
     *
     *  @return Код текущей команды.
     *  @return GB_COM_NO если буфер пуст.
     */
    eGB_COM getCom1();

    /** Запись команды в буфер 2.
     *
     *  Команды передающиеся в каждом цикле опроса.
     *
     *  @param com Код команды.
     *  @retval True - в случае успешной записи.
     *  @retval False - если не удалось поместить команду в буфер.
     */
    bool addCom2(eGB_COM com);

    /** Последовательная выдача имеющихся в буфере 2 команд (по кругу).
     *
     *  Если достигли конца буфера, то в следующий раз будет считано значние
     *  из начала буфера.
     *
     *  @return Код текущей команды.
     *  @return GB_COM_NO если буфер пуст или достигли конца буфера
     */
    eGB_COM getCom2();

    /** Запись срочной команды в конец очереди.
     *
     *  При добавлении срочной команды все содержимое буфера передачи сохраняется.
     *
     *  @param com Код срочной команды
     */
    void addFastCom(eGB_COM com);

    /** Считывание срочной команды. При этом идет копирование данных
     *
     *  При извлечении срочной команды в буфер передачи копируются сохраненные
     *  для данной команды данные.
     *
     *  @return Код срочной команды.
     */
    eGB_COM getFastCom();


    /** Запись байт данных.
     *  @param byte Байт данных.
     *  @param num Индекс элемента массива.
     */
    void setInt8(uint8_t byte, uint8_t num = 0)
    {
        if (num < kSizeDataBuf)
            data_[num] = byte;
    }

    /** Считывание байта данных.
     *  @param num Индекс элемента массива.
     *  @return Байт данных.
     */
    uint8_t getInt8(uint8_t num = 0) const { return (num < kSizeDataBuf) ? data_[num] : 0; }

    /** Запись 2-х байтного числа (uint16_t).
     *  В буфере данные записываются в 1 и 2 элемент массива uint8_t.
     *  @param val Данные.
     */
    void setInt16(uint16_t val) { *((uint16_t *) (&data_[1])) = val; }

    /** Считывание 2-х байтного числа (uint16_t).
     *  Данные хранятся в 1 и 2 элементах массива uint8_t.
     *  @return Данные.
     */
    uint16_t getInt16() const { return *((uint16_t *) (&data_[1])); }

    /** Возвращает указатель на буфер данных.
     *  @return Указатель на буфер данных.
     */
    uint8_t *getBuferAddress() { return &data_[0]; }

    /** Возвращает тип текущей команды на передачу.
     *
     *  Вызывается после извлечения быстрой команды, т.е. использования \a getFastCom.
     *
     *  @return Тип команды на передачу
     */
    eGB_SEND_TYPE getSendType() const;

    /** Установка типа команды на передачу.
     *
     *	Тип быстрой команды устанавливается после ее добавления, т.е.
     *	использования \a addFastCom.
     *
     *  @param sendType Тип команды на передачу.
     */
    void setSendType(eGB_SEND_TYPE sendType);

private:
    fastCom_t fastCom_[kSizeBufComFast];

    // номер текущей срочной команды
    uint8_t cntComFast_;
    // первый буфер команд
    eGB_COM com1_[kSizeBufCom1];
    // кол-во команд в первом буфере
    uint8_t numCom1_;
    // номер текущей команды в первом буфере
    uint8_t cnt1_;
    // второй буфер команд
    eGB_COM com2_[kSizeBufCom2];
    // кол-во команд во втором буфере
    uint8_t numCom2_;
    // номер текущей команды во втором буфере
    uint8_t cnt2_;
    // буфер данных (для каждой быстрой команды и основной )
    uint8_t data_[kSizeDataBuf];
};

#endif /* TX_COM_H_ */
