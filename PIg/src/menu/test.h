/*
 *  test.h
 *
 *  Created on: 15 июн. 2021 г.
 *      Author: Shcheblykin
 */

#ifndef TEST_H_
#define TEST_H_

#include "glbDefine.h"

/**
 * @brief Класс работы с тестами.
 *
 * В нем принятое сообщение из БСП преобразуется в текущий сигнал теста ПРМ/ПРД,
 * сигнал теста ПРД преобразуется в коды для передачи в БСП и хранится список
 * текущих сигналов в тесте ПРД.
 */
class TTest {

public:
    TTest() {
        clear();
    }

    /// Очистка списка сигналов передатчика.
    void clear();

    /**
     * @brief Добавляет сигнал в текущий список сигналов передатчика.
     * @param[in] signal Сигнал.
     * @return true если сигнал был добавлен, иначе false.
     */
    bool addSignalToList(eGB_TEST_SIGNAL signal);

    /** Преобразование тестового сигнала в значения для передачи в БСП.
     *  @param [out] cf Код сигнала КЧ/Команды.
     *  @param [out] rz Код сигнала РЗ.
     *  @param sig Тестовый сигнал.
     */

    /**
     * @brief Преобразует сигнал в коды для передачи в БСП.
     * @param[out] cf Код КЧ/Команды
     * @param[out] rz Код РЗ.
     * @param[in] sig Сигнал.
     */
    void getBytes(uint8_t &cf, uint8_t &rz, eGB_TEST_SIGNAL sig);

    /**
     * @brief Возвращает максимальное количество сигналов в тесте передатчика.
     * @return Количество сигналов в тесте передатчика.
     */
    uint8_t getNumSignals() const {
        return num_;
    }

    /**
     * @brief Преобразует сообщение из БСП в сигнал теста.
     * @param[in] s Сообщение из БСП.
     * @param[in] type Тип аппарата.
     * @param[in] opto Тип оптики.
     */
    void setCurrentSignal(const uint8_t *s, eGB_TYPE_DEVICE type, eGB_TYPE_OPTO opto);

    /**
     * @brief Возвращает текущий сигнал в тесте для передатчика или первого приемника.
     * @return Сигнал передатчика или первого приемника.
     */
    eGB_TEST_SIGNAL getCurrentSignal() const {
        return currentSignal_;
    }

    /**
     * @brief Возвращает текущий сигнал в тесте для второго приемника.
     * @return Сигнал второго приемника.
     */
    eGB_TEST_SIGNAL getCurrentSignal2() const {
        return currentSignal2_;
    }

    /// Список сигналов в тесте передатчика
    uint8_t signalList[MAX_NUM_TEST_SIGNAL];

private:
    uint8_t num_;   ///< Количество сигналов в тесте передатчика.
    eGB_TEST_SIGNAL currentSignal_;  ///< Сигнал передатчика или первого приемника.
    eGB_TEST_SIGNAL currentSignal2_; ///< Сигнал второго приемника.

    /**
     * @brief Возвращает номер младшего установленного бита.
     * @param[in] byte Данные.
     * @return Номер младшего установленного бита [1..8].
     * @retval 0 В случае если значение равно 0x00.
     */
    uint8_t getSetBit(uint8_t byte);

    /**
     * @brief Преобразует сообщение из БСП в сигнал теста К400 ВЧ.
     *
     * бит:      7       6       5       4       3       2       1       0
     * b1 :     [x]     [x]     [x]     [x]     [x]     [x]   [кч2]   [кч1]
     * b2 :  [ком8]  [ком7]  [ком6]  [ком5]  [ком4]  [ком3]  [ком2]  [ком1]
     * b3 : [ком16] [ком15] [ком14] [ком13] [ком12] [ком11] [ком10]  [ком9]
     * b4 : [ком24] [ком23] [ком22] [ком21] [ком20] [ком19] [ком18] [ком17]
     * b5 : [ком32] [ком31] [ком30] [ком29] [ком28] [ком27] [ком26] [ком25]
     *
     * Установленный бит означает наличие данного сигнала.
     * Поиск ведется до первого найденного сигнала:
     * - кч1->кч2->ком1->...->ком32
     *
     * @param[in] s Сообщение из БСП.
     * @return Сигнал.
     * @retval GB_SIGNAL_OFF если других сигналов нет.
     */
    eGB_TEST_SIGNAL getCurrentSignalK400(const uint8_t *s);

    /**
     * @brief Преобразует сообщение из БСП в сигнал теста РЗСК ВЧ.
     *
     * бит:     7      6      5      4      3      2      1      0
     * b1 :    [x]    [x]    [x]    [x]  [рз2]  [рз1]  [кч2]  [кч1]
     * b2 : [ком8] [ком7] [ком6] [ком5] [ком4] [ком3] [ком2] [ком1]
     *
     * Установленный бит означает наличие данного сигнала на передачу.
     * Поиск ведется до первого найденного сигнала:
     * - (ком1->...->ком32) + (рз2->рз1)
     * - (кч2 + рз1) -> (кч2 + рз2) -> (кч2) -> (кч1 + рз1) -> (кч1 + рз2) -> (кч1)
     *
     * ком/кч + рз1  = ком/кч без блокировки
     * ком/кч + рз2  = ком/кч с блокировкой
     * ком/кч без рз = ком/кч (для чисто командного варианта)
     *
     * @param[in] s Сообщение из БСП.
     * @return Сигнал.
     * @retval GB_SIGNAL_OFF если других сигналов нет.
     */
    eGB_TEST_SIGNAL getCurrentSignalRZSK(const uint8_t *s);

    /**
     * @brief Преобразует сообщение из БСП в сигнал теста Р400/Р400м.
     *
     * бит:  7   6   5    4     3     2     1     0
     * b1 : [x] [x] [x] [рз] [кч4] [кч3] [кч2] [кч1]
     *
     * Установленный бит означает наличие данного сигнала на передачу.
     * Поиск ведется до первого найденного сигнала:
     * - (рз) + (кч1->кч4)
     *
     * рз + кч  = РЗ и КЧn
     *
     * @param[in] s Сообщение из БСП.
     * @return Сигнал.
     * @retval GB_SIGNAL_OFF если других сигналов нет.
     */
    eGB_TEST_SIGNAL getCurrentSignalR400M(const uint8_t *s);

    /**
     * @brief Преобразует сообщение из БСП в сигнал теста ОПТИКА.
     *
     * бит:      7       6       5       4       3       2       1       0
     * b1 :     [x]     [x]     [x]    [рз]     [x]     [x]     [x]    [кс]
     * b2 :  [ком8]  [ком7]  [ком6]  [ком5]  [ком4]  [ком3]  [ком2]  [ком1]
     * b3 : [ком16] [ком15] [ком14] [ком13] [ком12] [ком11] [ком10]  [ком9]
     * b4 : [ком24] [ком23] [ком22] [ком21] [ком20] [ком19] [ком18] [ком17]
     * b5 : [ком32] [ком31] [ком30] [ком29] [ком28] [ком27] [ком26] [ком25]
     *
     * Установленный бит означает наличие данного сигнала на передачу.
     * Поиск ведется до первого найденного сигнала:
     * - рз->кс->ком1->...->ком32
     *
     * @param[in] s Сообщение из БСП.
     * @return Сигнал.
     * @retval GB_SIGNAL_OFF если других сигналов нет.
     */
    eGB_TEST_SIGNAL getCurrentSignalOpto(const uint8_t *s);

    /**
     * @brief Преобразует сообщение из БСП в сигнал теста ОПТИКА.
     *
     * бит:     7      6      5      4      3      2      1      0
     * b1 :    [x]    [x]    [x]   [рз]    [x]    [x]    [x]   [кс]
     * b2 :  [к8A]  [к7A]  [к6A]  [к5A]  [к4A]  [к3A]  [к2A]  [к1A]
     * b3 : [к16A] [к15A] [к14A] [к13A] [к12A] [к11A] [к10A]  [к9A]
     * b4 : [к24A] [к23A] [к22A] [к21A] [к20A] [к19A] [к18A] [к17A]
     * b5 : [к32A] [к31A] [к30A] [к29A] [к28A] [к27A] [к26A] [к25A]
     * b6 :  [к8B]  [к7B]  [к6B]  [к5B]  [к4B]  [к3B]  [к2B]  [к1B]
     * b7 : [к16B] [к15B] [к14B] [к13B] [к12B] [к11B] [к10B]  [к9B]
     * b8 : [к24B] [к23B] [к22B] [к21B] [к20B] [к19B] [к18B] [к17B]
     * b9 : [к32B] [к31B] [к30B] [к29B] [к28B] [к27B] [к26B] [к25B]
     * b10:  [к8C]  [к7C]  [к6C]  [к5C]  [к4C]  [к3C]  [к2C]  [к1C]
     * b11: [к16C] [к15C] [к14C] [к13C] [к12C] [к11C] [к10C]  [к9C]
     * b12: [к24C] [к23C] [к22C] [к21C] [к20C] [к19C] [к18C] [к17C]
     * b13: [к32C] [к31C] [к30C] [к29C] [к28C] [к27C] [к26C] [к25C]
     *
     * Установленный бит означает наличие данного сигнала на передачу.
     * Поиск ведется до первого найденного сигнала:
     * - рз->кс->ком1А->...->ком32С
     *
     * @param[in] s Сообщение из БСП.
     * @return Сигнал.
     * @retval GB_SIGNAL_OFF если других сигналов нет.
     */
    eGB_TEST_SIGNAL getCurrentSignalOptoRingUni(const uint8_t *s);
};

#endif /* TEST_H_ */
